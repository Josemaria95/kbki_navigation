#!/usr/bin/env python
from __future__ import print_function
import numpy as np
import matplotlib.pyplot as plt
from geometry_msgs.msg import Twist , Pose
from nav_msgs.msg import Odometry, OccupancyGrid, MapMetaData 
from kbki_tesis.msg import Obst, Obst_map
import copy
import rospy
import time

class SlamInterface(object):

	def __init__ (self):

		self.pub = rospy.Publisher("/map_coordinates",Obst_map,queue_size=10, latch=True)
		self.obst_msg = Obst_map()
		rospy.Subscriber("/map",OccupancyGrid, self.readMap)
		self.grid_x = None #360 * [0.,]
		self.grid_y = None #360 * [0.,]
		self.width  = None
		self.height = None
		self.resolution = None
		self.pose_x = None
		self.pose_y = None
		self.tamano = None
		self.step = None
		self.x = None
		self.y = None

	def readMap(self,msg):

		#self.grid_x = []
		#self.grid_y = []
		self.width = msg.info.width
		self.height = msg.info.height
		self.resolution = msg.info.resolution
		#self.grid_x = self.width * [0.,]
		#self.grid_y = self.height * [0.,]
		self.pose_x = msg.info.origin.position.x
		self.pose_y = msg.info.origin.position.y 

		data = np.array(msg.data)
		current_map = data.reshape(self.height, self.width)
		vector_i = []
		vector_j = []

		self.step  = 10

		# Tomar los indices de los obstaculos y almacenarlos
		for i in range(current_map.shape[0]):
			for j in range(current_map.shape[1]):
				if current_map[i][j] == 100:
					vector_i.append(i)
					vector_j.append(j)

		self.grid_x = copy.copy(vector_i)
		self.grid_y = copy.copy(vector_j)
		#vector_i = []
		#vector_j = []

		#print("x: ", self.grid_x , "y: ", self.grid_y)

		# Convertir los pixeles en coordenadas 
		self.x = (np.array(self.grid_y) * self.resolution) + self.pose_x
		self.y = (np.array(self.grid_x) * self.resolution) + self.pose_y

		#plt.plot(self.x, self.y,'.')
		#plt.axis([-4,4,-4,4])
		#plt.show()

		self.tamano = len(self.x)

		#return (grid_x, grid_y)

	def publishMap_xy (self):

		#self.obst_msg.grid_x = self.x[0:self.tamano:self.step]
		self.obst_msg.grid_x = self.x[0:self.tamano]
		#self.obst_msg.grid_y = self.y[0:self.tamano:self.step]
		self.obst_msg.grid_y = self.y[0:self.tamano]
		print("map x: ", np.round(self.obst_msg.grid_x,3))
		print("map y: ", np.round(self.obst_msg.grid_y,3))
		print("\n")
		self.pub.publish(self.obst_msg)

rospy.init_node("test_map", anonymous=True)
slam = SlamInterface()
# Rate Frequency
freq = 5     # Frecuencia (Hz)
T    = 1.0/freq # Periodo
rate = rospy.Rate(freq)

while not rospy.is_shutdown():

	time.sleep(1)
	#obstaculos = slam.convertCoordinates()
	#print("obst: ", obstaculos)

	slam.publishMap_xy()

	rate.sleep()


rospy.spin()







	
	


